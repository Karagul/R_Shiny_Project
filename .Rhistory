# Input: a series of dates (increasing) and series of corresponding returns
# Output: a graph of how $100 grows over this time period
plot_portfolio_growth_over_time = function(date_series, return_series, asset_name, color)
{
# Verify that the length of the dates vector matches with return vector
assert(length(date_series) == length(return_series))
n_obs = length(date_series)
price_series = c(100.0*(1 + return_series[1]/100))
for (i in 2:n_obs)
{
price_series = append(price_series,
price_series[i-1]*(1 + return_series[i]/100))
}
assert(length(date_series) == length(price_series))
price_plot = ggplot(data = data.frame(date_series, price_series),
aes(x = date_series, y = price_series)) +
geom_line(color = color, size = 1) +
ggtitle(paste("If you had invested $100 in", asset_name, "...")) +
xlab("Time") + ylab("Portfolio value")
print(price_plot)
}
# Input: m+1 columns of asset returns (from m assets)
# Output: plot the efficient market frontier
plot_efficient_market_frontier = function(asset_returns, n_points)
{
# Extract necessary parameters
n_assets = ncol(asset_returns) - 1
n_obs = nrow(asset_returns)
n_years = n_obs / 252
# Initialize containers for holding return and vol simulations
return_vector = c()
vol_vector = c()
sharpe_vector = c()
for (i in 1:n_points)
{
# Generate random weights for n assets from uniform(0,1)
asset_weights = runif(n_assets, min = 0, max = 1)
normalization_ratio = sum(asset_weights)
# Asset weights need to add up to 100%
asset_weights = asset_weights / normalization_ratio
# print(asset_weights)
# print(asset_returns)
# Generate the portfolio return vector using these weights
random_portfolio_returns = calculate_portfolio_returns(
asset_weights,
asset_returns)
# print(random_portfolio_returns)
# plot_returns_histogram(random_portfolio_returns$portfolio_returns)
cumulative_return = calculate_cumulative_return(random_portfolio_returns$portfolio_returns)
annualized_return = 100*((1 + cumulative_return/100)^(1/n_years) - 1)
annualized_vol = sd(random_portfolio_returns$portfolio_returns)*(252^0.5)
sharpe = annualized_return / annualized_vol
return_vector = append(return_vector, annualized_return)
vol_vector = append(vol_vector, annualized_vol)
sharpe_vector = append(sharpe_vector, sharpe)
#print(paste("Asset weights:",asset_weights))
#print(paste("Anualized return:",annualized_return))
#print(paste("Annualized vol:",annualized_vol))
}
g = ggplot(data = data.frame(vol_vector, return_vector, sharpe_vector),
aes(x = vol_vector, y = return_vector, color = sharpe_vector)) +
scale_color_gradient(low = "red", high = "blue", name = "Sharpe Ratio\n(Return/Risk)") +
ggtitle("Efficient Market Frontier") +
xlab("Annualized Vol (%)") +
ylab("Annualized Return (%)") +
geom_point()
print(g)
}
# Print key metrics of cumulative return, annualized return,
#   annualized volatility, etc.
print_key_metrics = function(asset_name, asset_returns, start_date, end_date)
{
n_obs = nrow(df)
n_years = n_obs / 252
cumulative_return = calculate_cumulative_return(asset_returns)
annualized_return = 100*((1 + cumulative_return/100)^(1/n_years) - 1)
annualized_vol = sd(asset_returns)*(252^0.5)
result = paste("For ",asset_name," between ",as.character(start_date)," and ",as.character(end_date),":",
"Total return: ",round(cumulative_return,1),"%,",
"Annualized return: ",round(annualized_return,1),"%, ",
"Annualized vol: ",round(annualized_vol,1),"%")
return(result)
}
# Plot a scatterplot of returns between assets 1 and 2
plot_scatter_of_returns = function(asset1_returns, asset2_returns,
asset1_name, asset2_name)
{
g = ggplot(data = data.frame(asset1_returns, asset2_returns),
aes(x = asset1_returns, y = asset2_returns)) +
geom_point(color = "darkblue", size = 1) +
ggtitle(paste("Scatterplot of Returns between",
asset1_name, "and", asset2_name)) +
xlab(paste("Returns of", asset1_name)) +
ylab(paste("Returns of", asset2_name)) +
geom_smooth(color = "red", method=lm, se=FALSE)
print(g)
}
# Calculate the portfolio weights with the min variance
#   over this period of time
min_var_weights = calculate_min_var_portfolio(df,
print_description = TRUE)
plot_min_var_bar(returns_matrix, min_var_weights)
plot_min_var_bar(df, min_var_weights)
# NYC Data Science Academy
# R Shiny Project
# Joe Lu
# Joe.Zhou.Lu@gmail.com
# Also, call the global.R helper file (my personalized library of functions)
library(shiny)
library(shinydashboard)
source("./global.R")
header = dashboardHeader(
title = "Asset Allocation"
)
sidebar = dashboardSidebar(
sidebarMenu(
menuItem("Choose start & end date", tabName = "choosing_dates_tab", icon = icon("dashboard")),
menuItem("Time Series Plot", tabName = "time_series_tab", icon = icon("chart-line")),
menuItem("Distribution of Daily Returns", tabName = "histogram_tab", icon = icon("chart-bar")),
menuItem("Scatterplots", tabName = "scatterplot_tab", icon = icon("chart-scatter")),
menuItem("Correlation Matrix", tabName = "correlation_tab", icon = icon("table")),
menuItem("2-Asset Return-Variance", tabName = "emf_tab1", icon = icon("chart-pie")),
menuItem("3-Asset Return-Variance", tabName = "emf_tab2", icon = icon("chart-pie")),
menuItem("Minimum Variance Portfolio", tabName = "min_var_tab", icon = icon("life-ring"))
)
)
body = dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "choosing_dates_tab",
dateRangeInput("start_n_end_date", "Please choose start & end dates between Sep 1999 and Jan 2020:",
start = "2000-01-01",
end = "2020-01-01",
min = "2000-01-01",
max = "2020-01-01",
format = "yyyy/mm/dd",
separator = "to")
),
tabItem(tabName = "time_series_tab",
h2("If you had invested $100..."),
textOutput('stock_key_metrics'),
plotOutput('stock_growth_over_time'),
textOutput('tsy_key_metrics'),
plotOutput('tsy_growth_over_time'),
textOutput('gold_key_metrics'),
plotOutput('gold_growth_over_time')
),
tabItem(tabName = "histogram_tab",
h2("Daily returns of various assets..."),
plotOutput('stock_return_histogram'),
plotOutput('tsy_return_histogram'),
plotOutput('gold_return_histogram')
),
tabItem(tabName = "scatterplot_tab",
h2("Scatterplot of Daily Returns"),
plotOutput('stock_vs_EM'),
plotOutput('stock_vs_tsy'),
plotOutput('stock_vs_gold')
),
tabItem(tabName = "correlation_tab",
h2("Correlation Matrix"),
plotOutput('correlation_heatmap')
),
tabItem(tabName = "emf_tab1",
h2("2-Asset Return-Variance Tradeoff"),
plotOutput('plot_emf1')
),
tabItem(tabName = "emf_tab2",
h2("3-Asset Return-Variance Tradeoff"),
plotOutput('plot_emf2')
),
tabItem(tabName = "min_var_tab",
h2("Min Variance Portfolio"),
plotOutput('plot_min_var_Bar'),
plotOutput('plot_min_var_growth'),
plotOutput('plot_min_var_hist')
)
)
)
# Define UI for application that draws a histogram
ui <- dashboardPage(header, sidebar, body, skin = "green")
server <- function(input, output) {
date_filtered_df = reactive({
returns_1999_2020 %>%
filter(Date >= input$start_n_end_date[1] &
Date <= input$start_n_end_date[2])
})
df3 = reactive({
date_filtered_df() %>%
select(Stocks_US,
Stocks_Developed,
Stocks_EM,
REITs,
Stocks_Energy,
Gold,
Bonds_Tsy_30y)
})
df4 = reactive({
date_filtered_df() %>%
select(Date, Stocks_US, Bonds_Tsy_30y)
})
df5 = reactive({
date_filtered_df() %>%
select(Date, Stocks_US, Bonds_Tsy_30y, Gold)
})
min_var_weights = reactive({
calculate_min_var_portfolio(date_filtered_df(),
print_description = TRUE)
})
min_var_returns = reactive({
calculate_portfolio_returns(min_var_weights(), date_filtered_df())
})
####################################################################
output$stock_key_metrics = renderText({
print_key_metrics("U.S. Stocks",
date_filtered_df()$Stocks_US,
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$tsy_key_metrics = renderText({
print_key_metrics("U.S. Treasuries",
date_filtered_df()$Bonds_Tsy_30y,
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$gold_key_metrics = renderText({
print_key_metrics("Gold",
date_filtered_df()$Gold,
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$stock_growth_over_time = renderPlot(
plot_portfolio_growth_over_time(date_filtered_df()$Date,
date_filtered_df()$Stocks_US,
"U.S. Stocks",
"limegreen")
)
output$tsy_growth_over_time = renderPlot(
plot_portfolio_growth_over_time(date_filtered_df()$Date,
date_filtered_df()$Bonds_Tsy_30y,
"30 Year Treasuries",
"dodgerblue2")
)
output$gold_growth_over_time = renderPlot(
plot_portfolio_growth_over_time(date_filtered_df()$Date,
date_filtered_df()$Gold,
"Gold",
"gold2")
)
output$stock_return_histogram = renderPlot(
plot_returns_histogram(date_filtered_df()$Stocks_US, "U.S. Stocks",
outline_color = "green4", fill_color = "green3")
)
output$tsy_return_histogram = renderPlot(
plot_returns_histogram(date_filtered_df()$Bonds_Tsy_30y, "30y Treasuries",
outline_color = "dodgerblue4", fill_color = "dodgerblue2")
)
output$gold_return_histogram = renderPlot(
plot_returns_histogram(date_filtered_df()$Gold, "Gold",
outline_color = "gold4", fill_color = "gold3")
)
output$stock_vs_EM = renderPlot(
plot_scatter_of_returns(date_filtered_df()$Stocks_US,
date_filtered_df()$Stocks_EM,
"U.S. Stocks", "EM Stocks")
)
output$stock_vs_tsy = renderPlot(
plot_scatter_of_returns(date_filtered_df()$Stocks_US,
date_filtered_df()$Bonds_Tsy_30y,
"U.S. Stocks", "30y Treasuries")
)
output$stock_vs_gold = renderPlot(
plot_scatter_of_returns(date_filtered_df()$Stocks_US,
date_filtered_df()$Gold,
"U.S. Stocks", "Gold")
)
output$correlation_heatmap = renderPlot(
plot_correlation_heatmap(df3())
)
output$plot_emf1 = renderPlot(
plot_efficient_market_frontier(df4(), n_points = 10000)
)
output$plot_emf2 = renderPlot(
plot_efficient_market_frontier(df5(), n_points = 10000)
)
output$plot_min_var_Bar = renderPlot(
plot_min_var_bar(date_filtered_df(), min_var_weights())
)
output$plot_min_var_growth = renderPlot(
plot_portfolio_growth_over_time(min_var_returns()$Date,
min_var_returns()$portfolio_returns,
"Min Var Porfolio",
"darkviolet")
)
output$plot_min_var_hist = renderPlot(
plot_returns_histogram(min_var_returns()$portfolio_returns,
"Min Var Porfolio",
outline_color = "purple4", fill_color = "purple2")
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# NYC Data Science Academy
# R Shiny Project
# Joe Lu
# Joe.Zhou.Lu@gmail.com
# Also, call the global.R helper file (my personalized library of functions)
library(shiny)
library(shinydashboard)
source("./global.R")
header = dashboardHeader(
title = "Asset Allocation"
)
sidebar = dashboardSidebar(
sidebarMenu(
menuItem("Choose start & end date", tabName = "choosing_dates_tab", icon = icon("dashboard")),
menuItem("Time Series Plot", tabName = "time_series_tab", icon = icon("chart-line")),
menuItem("Distribution of Daily Returns", tabName = "histogram_tab", icon = icon("chart-bar")),
menuItem("Scatterplots", tabName = "scatterplot_tab", icon = icon("chart-scatter")),
menuItem("Correlation Matrix", tabName = "correlation_tab", icon = icon("table")),
menuItem("2-Asset Return-Variance", tabName = "emf_tab1", icon = icon("chart-pie")),
menuItem("3-Asset Return-Variance", tabName = "emf_tab2", icon = icon("chart-pie")),
menuItem("Minimum Variance Portfolio", tabName = "min_var_tab", icon = icon("life-ring"))
)
)
body = dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "choosing_dates_tab",
dateRangeInput("start_n_end_date", "Please choose start & end dates between Sep 1999 and Jan 2020:",
start = "2000-01-01",
end = "2020-01-01",
min = "2000-01-01",
max = "2020-01-01",
format = "yyyy/mm/dd",
separator = "to")
),
tabItem(tabName = "time_series_tab",
h2("If you had invested $100..."),
textOutput('stock_key_metrics'),
plotOutput('stock_growth_over_time'),
textOutput('tsy_key_metrics'),
plotOutput('tsy_growth_over_time'),
textOutput('gold_key_metrics'),
plotOutput('gold_growth_over_time')
),
tabItem(tabName = "histogram_tab",
h2("Daily returns of various assets..."),
plotOutput('stock_return_histogram'),
plotOutput('tsy_return_histogram'),
plotOutput('gold_return_histogram')
),
tabItem(tabName = "scatterplot_tab",
h2("Scatterplot of Daily Returns"),
plotOutput('stock_vs_EM'),
plotOutput('stock_vs_tsy'),
plotOutput('stock_vs_gold')
),
tabItem(tabName = "correlation_tab",
h2("Correlation Matrix"),
plotOutput('correlation_heatmap')
),
tabItem(tabName = "emf_tab1",
h2("2-Asset Return-Variance Tradeoff"),
h4("Showing all portfolios of U.S. Stocks and Treasuries"),
plotOutput('plot_emf1')
),
tabItem(tabName = "emf_tab2",
h2("3-Asset Return-Variance Tradeoff"),
h4("Showing all portfolios of U.S. Stocks, Treasuries, and Gold"),
plotOutput('plot_emf2')
),
tabItem(tabName = "min_var_tab",
h2("Min Variance Portfolio"),
plotOutput('plot_min_var_Bar'),
textOutput('min_var_key_metrics'),
plotOutput('plot_min_var_growth'),
plotOutput('plot_min_var_hist')
)
)
)
# Define UI for application that draws a histogram
ui <- dashboardPage(header, sidebar, body, skin = "green")
server <- function(input, output) {
date_filtered_df = reactive({
returns_1999_2020 %>%
filter(Date >= input$start_n_end_date[1] &
Date <= input$start_n_end_date[2])
})
df3 = reactive({
date_filtered_df() %>%
select(Stocks_US,
Stocks_Developed,
Stocks_EM,
REITs,
Stocks_Energy,
Gold,
Bonds_Tsy_30y)
})
df4 = reactive({
date_filtered_df() %>%
select(Date, Stocks_US, Bonds_Tsy_30y)
})
df5 = reactive({
date_filtered_df() %>%
select(Date, Stocks_US, Bonds_Tsy_30y, Gold)
})
min_var_weights = reactive({
calculate_min_var_portfolio(date_filtered_df(),
print_description = TRUE)
})
min_var_returns = reactive({
calculate_portfolio_returns(min_var_weights(), date_filtered_df())
})
####################################################################
output$stock_key_metrics = renderText({
print_key_metrics("U.S. Stocks",
date_filtered_df()$Stocks_US,
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$tsy_key_metrics = renderText({
print_key_metrics("U.S. Treasuries",
date_filtered_df()$Bonds_Tsy_30y,
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$gold_key_metrics = renderText({
print_key_metrics("Gold",
date_filtered_df()$Gold,
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$stock_growth_over_time = renderPlot(
plot_portfolio_growth_over_time(date_filtered_df()$Date,
date_filtered_df()$Stocks_US,
"U.S. Stocks",
"limegreen")
)
output$tsy_growth_over_time = renderPlot(
plot_portfolio_growth_over_time(date_filtered_df()$Date,
date_filtered_df()$Bonds_Tsy_30y,
"30 Year Treasuries",
"dodgerblue2")
)
output$gold_growth_over_time = renderPlot(
plot_portfolio_growth_over_time(date_filtered_df()$Date,
date_filtered_df()$Gold,
"Gold",
"gold2")
)
output$stock_return_histogram = renderPlot(
plot_returns_histogram(date_filtered_df()$Stocks_US, "U.S. Stocks",
outline_color = "green4", fill_color = "green3")
)
output$tsy_return_histogram = renderPlot(
plot_returns_histogram(date_filtered_df()$Bonds_Tsy_30y, "30y Treasuries",
outline_color = "dodgerblue4", fill_color = "dodgerblue2")
)
output$gold_return_histogram = renderPlot(
plot_returns_histogram(date_filtered_df()$Gold, "Gold",
outline_color = "gold4", fill_color = "gold3")
)
output$stock_vs_EM = renderPlot(
plot_scatter_of_returns(date_filtered_df()$Stocks_US,
date_filtered_df()$Stocks_EM,
"U.S. Stocks", "EM Stocks")
)
output$stock_vs_tsy = renderPlot(
plot_scatter_of_returns(date_filtered_df()$Stocks_US,
date_filtered_df()$Bonds_Tsy_30y,
"U.S. Stocks", "30y Treasuries")
)
output$stock_vs_gold = renderPlot(
plot_scatter_of_returns(date_filtered_df()$Stocks_US,
date_filtered_df()$Gold,
"U.S. Stocks", "Gold")
)
output$correlation_heatmap = renderPlot(
plot_correlation_heatmap(df3())
)
output$plot_emf1 = renderPlot(
plot_efficient_market_frontier(df4(), n_points = 10000)
)
output$plot_emf2 = renderPlot(
plot_efficient_market_frontier(df5(), n_points = 10000)
)
output$plot_min_var_Bar = renderPlot(
plot_min_var_bar(date_filtered_df(), min_var_weights())
)
output$min_var_key_metrics = renderText({
print_key_metrics("Min Var Portfolio",
min_var_returns(),
input$start_n_end_date[1],
input$start_n_end_date[2])
})
output$plot_min_var_growth = renderPlot(
plot_portfolio_growth_over_time(min_var_returns()$Date,
min_var_returns()$portfolio_returns,
"Min Var Porfolio",
"darkviolet")
)
output$plot_min_var_hist = renderPlot(
plot_returns_histogram(min_var_returns()$portfolio_returns,
"Min Var Porfolio",
outline_color = "purple4", fill_color = "purple2")
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
